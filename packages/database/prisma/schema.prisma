// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum OrganizationRole {
  OWNER
  INTERVIEWER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  organizations         OrganizationUserRole[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Organization {
  id   String  @id @default(cuid())
  name String
  url  String?
  logo String?

  organizationRole      OrganizationUserRole[]
  organizationActionLog OrganizationActivityLog[]
  jobPost               JobPost[]
  createdAt             DateTime                  @default(now())
}

model OrganizationUserRole {
  id   String           @id @default(cuid())
  role OrganizationRole

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: NoAction)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction)

  createdAt DateTime @default(now())
}

model OrganizationActivityLog {
  id     String @id @default(cuid())
  action String

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: NoAction)

  createdAt DateTime @default(now())
}

model JobPost {
  id          String  @id @default(cuid())
  title       String
  description String?
  category    String?
  employmentType      String?
  country             String?
  city                String?
  remoteOption        String?
  countryResidence    String? @default("No")
  countryListResidence String[] @default([])
  displaySalary       String?  @default("Not Shown")
  currency            String?
  salaryAmount        Float?   // Optional number
  minimumAmount       Float?   // Optional number
  maximumAmount       Float?   // Optional number
  isPublished         Boolean @default(false)
  isArchived          Boolean @default(false)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: NoAction)

  jobApplication  JobApplication[]
  jobStage  JobStage[]
  createdAt DateTime @default(now())
}


model JobApplication{
  id String @id @default(cuid())
  label String
  dataType  String
  option    String[] @default([])
  rule      String    @default("Optional")
  questionType  String  @default("Default")
  isDeleted     Boolean @default(false)
  
  jobId String
  jobPost   JobPost @relation(fields: [jobId], references: [id], onDelete: NoAction)
  
  createdAt   DateTime @default(now())
}

model JobStage {
  id String @id @default(cuid())
  name  String
  isDeletable Boolean @default(false)
  isDeleted Boolean @default(false)
  displayOrder  Int

  jobId String
  jobPost   JobPost @relation(fields: [jobId], references: [id], onDelete: NoAction)
  createdAt DateTime @default(now())
}
