version: "3"

volumes:
  database:
    driver: local

services:
  main:
    container_name: main
    build:
      args:
        NEXT_PUBLIC_PADDLE_CLIENT_KEY: ${NEXT_PUBLIC_PADDLE_CLIENT_KEY}
        NEXT_PUBLIC_PADDLE_ENV: ${NEXT_PUBLIC_PADDLE_ENV}
        NEXT_PUBLIC_RECAPTCHA_SITE_KEY: ${NEXT_PUBLIC_RECAPTCHA_SITE_KEY}
        NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
        NEXT_PUBLIC_CLIENT_URL: ${NEXT_PUBLIC_CLIENT_URL}
      context: .
      dockerfile: ./apps/main/Dockerfile
    restart: always
    ports:
      - 3000:3000
    dns:
      - 8.8.8.8
      - 1.1.1.1
    environment:
      - NEXT_PUBLIC_PADDLE_CLIENT_KEY=${NEXT_PUBLIC_PADDLE_CLIENT_KEY}
      - NEXT_PUBLIC_PADDLE_ENV=${NEXT_PUBLIC_PADDLE_ENV}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_CLIENT_URL=${NEXT_PUBLIC_CLIENT_URL}
    networks:
      - app_network
    depends_on:
      - migration  # Ensures migrations run before the main service

  client:
    container_name: client
    build:
      args:
        NEXT_PUBLIC_PADDLE_CLIENT_KEY: ${NEXT_PUBLIC_PADDLE_CLIENT_KEY}
        NEXT_PUBLIC_PADDLE_ENV: ${NEXT_PUBLIC_PADDLE_ENV}
        NEXT_PUBLIC_RECAPTCHA_SITE_KEY: ${NEXT_PUBLIC_RECAPTCHA_SITE_KEY}
        NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
        NEXT_PUBLIC_CLIENT_URL: ${NEXT_PUBLIC_CLIENT_URL}
      context: .
      dockerfile: ./apps/client/Dockerfile
    restart: always
    ports:
      - 3001:3001
    environment:
      - NEXT_PUBLIC_PADDLE_CLIENT_KEY=${NEXT_PUBLIC_PADDLE_CLIENT_KEY}
      - NEXT_PUBLIC_PADDLE_ENV=${NEXT_PUBLIC_PADDLE_ENV}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_CLIENT_URL=${NEXT_PUBLIC_CLIENT_URL}
    dns:
      - 8.8.8.8
      - 1.1.1.1
    labels:
        - traefik.enable=true
        - traefik.http.middlewares.gzip.compress=true
        - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https

        # Main domain
        - traefik.http.routers.client-main.entrypoints=http
        - traefik.http.routers.client-main.rule=Host(`battiinnovate.com`)
        - traefik.http.routers.client-main.middlewares=redirect-to-https

        # Wildcard subdomains (simplified regex)
        - traefik.http.routers.client-wildcard.entrypoints=http
        - traefik.http.routers.client-wildcard.rule=HostRegexp(`{subdomain:.+}.battiinnovate.com`)
        - traefik.http.routers.client-wildcard.middlewares=redirect-to-https

        # HTTPS versions
        - traefik.http.routers.client-main-https.entrypoints=https
        - traefik.http.routers.client-main-https.rule=Host(`battiinnovate.com`)
        - traefik.http.routers.client-main-https.tls=true
        - traefik.http.routers.client-main-https.tls.certresolver=letsencrypt

        - traefik.http.routers.client-wildcard-https.entrypoints=https
        - traefik.http.routers.client-wildcard-https.rule=HostRegexp(`{subdomain:.+}.battiinnovate.com`)
        - traefik.http.routers.client-wildcard-https.tls=true
        - traefik.http.routers.client-wildcard-https.tls.certresolver=letsencrypt

        # Essential service definition
        - traefik.http.services.client.loadbalancer.server.port=3001
    networks:
      - app_network
    depends_on:
      - migration  # Ensures migrations run before the client service

  migration:
    container_name: migration
    build:
      context: .
      dockerfile: ./Dockerfile.migrate  # Points to the migration Dockerfile
    environment:
      - NODE_ENV=production  # Set this as needed
    networks:
      - app_network
    command: ["pnpm", "run", "db:migrate:deploy"]  # This will run the Prisma migrations on container startup

networks:
  app_network:
    driver: bridge

